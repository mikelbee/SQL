# This is a project using Spotify data from Kaggle.
# I created a table to insert Spotify data into SQLite Studio.
# I, then, performed analytics using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

# I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

# 1. What is the average danceability by artist and track?

SELECT
    artist_name,
    track_name,
    AVG(danceability) AS avg_danceability
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name, track_name
ORDER BY avg_danceability DESC;

# 2. Who are the top 10 artists based on average popularity?
SELECT
    artist_name,
    AVG(popularity) AS AVG_popularity
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name
ORDER BY
    popularity DESC
LIMIT
    10;

# 3. What artist released the longest song?
SELECT
    artist_name
FROM
    BIT_DB.Spotifydata
ORDER BY
    duration_ms DESC
LIMIT 1;

# 4. What's the average danceability for the 10 most popular songs?
SELECT
    AVG(danceability) AS top_10_avg_danceability
FROM
    BIT_DB.Spotifydata s
JOIN (SELECT
            popularity
        FROM
            BIT_DB.Spotifydata t
        ORDER BY
            popularity DESC
        LIMIT 10) t
    ON s.popularity = t.popularity;
    
# 5. What is the most popular fastest song, what's its tempo and who sang it?

SELECT
    s.track_name,
    s.artist_name,
    s.tempo
FROM
    BIT_DB.Spotifydata s
JOIN (
        SELECT
            MAX(tempo) AS max_tempo
        FROM       
            BIT_DB.Spotifydata t) t
    ON t.max_tempo = s.tempo;

# 6. Sort the songs as 'Fast', 'Medium', or 'Slow' under the column 'Song Tempo'. Order them from fast to slow.

SELECT
    track_name,
    tempo,
CASE WHEN
    tempo <= 90 THEN 'Slow'
    WHEN tempo BETWEEN 91 AND 120 THEN 'Medium'
    ELSE 'Fast' END AS song_tempo
FROM
    BIT_DB.Spotifydata
ORDER BY song_tempo ASC;
    
